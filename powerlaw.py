import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import find_peaks


# Replace this with your actual dataset
data = [396, 396, 398, 400, 404, 406, 410, 412, 417, 420, 424, 426, 429, 433, 438, 441, 444, 448, 453, 459, 463, 467, 468, 471, 475, 477, 482, 483, 486, 491, 493, 494, 498, 499, 504, 505, 507, 508, 510, 510, 512, 513, 518, 520, 521, 525, 529, 531, 533, 537, 539, 544, 548, 555, 557, 559, 565, 566, 574, 581, 584, 588, 596, 600, 605, 609, 610, 616, 625, 632, 637, 640, 650, 657, 665, 668, 678, 678, 685, 689, 695, 695, 700, 705, 705, 708, 709, 713, 714, 718, 719, 722, 723, 721, 722, 723, 727, 730, 731, 731, 732, 733, 734, 735, 736, 737, 738, 740, 740, 739, 740, 743, 745, 746, 747, 751, 752, 754, 756, 760, 760, 760, 762, 764, 766, 769, 771, 774, 778, 783, 788, 789, 792, 792, 796, 797, 800, 801, 801, 800, 802, 803, 802, 801, 802, 805, 807, 807, 807, 806, 807, 807, 811, 810, 810, 811, 813, 816, 817, 819, 818, 820, 820, 821, 822, 823, 824, 826, 828, 830, 835, 838, 841, 842, 843, 847, 848, 849, 852, 853, 856, 854, 855, 855, 858, 858, 858, 858, 860, 860, 861, 862, 862, 862, 862, 863, 864, 865, 866, 868, 869, 869, 868, 868, 868, 868, 870, 871, 876, 874, 874, 875, 875, 877, 878, 879, 879, 880, 882, 883, 883, 883, 883, 882, 882, 883, 884, 884, 886, 886, 887, 887, 887, 888, 891, 893, 893, 893, 893, 896, 895, 898, 899, 900, 900, 902, 903, 904, 906, 906, 907, 907, 908, 908, 908, 908, 908, 908, 909, 909, 911, 911, 913, 914, 916, 917, 917, 917, 917, 919, 919, 921, 921, 921, 921, 921, 921, 922, 921, 924, 924, 924, 925, 925, 922, 923, 923, 923, 923, 923, 923, 923, 924, 924, 925, 925, 927, 926, 928, 928, 928, 928, 928, 927, 928, 927, 928, 929, 930, 931, 932, 932, 934, 934, 933, 934, 933, 934, 937, 936, 936, 936, 937, 938, 937, 936, 936, 937, 938, 938, 938, 938, 940, 940, 941, 941, 940, 939, 939, 939, 939, 939, 938, 937, 937, 937, 937, 938, 940, 940, 941, 942, 944, 944, 941, 942, 942, 943, 944, 943, 946, 946, 947, 947, 947, 947, 946, 946, 947, 947, 947, 947, 948, 947, 947, 948, 948, 949, 949, 949, 948, 948, 949, 948, 948, 950, 952, 954, 954, 954, 954, 954, 954, 954, 953, 954, 954, 954, 954, 954, 954, 952, 951, 951, 951, 951, 953, 953, 954, 955, 957, 957, 959, 959, 958, 958, 958, 958, 958, 958, 958, 959, 959, 960, 961, 962, 962, 964, 966, 966, 967, 968, 970, 970, 974, 973, 974, 975, 977, 977, 976, 978, 980, 978, 978, 979, 978, 978, 976, 976, 976, 976, 976, 976, 977, 976, 976, 976, 976, 975, 975, 976, 976, 977, 978, 978, 978, 978, 977, 977, 978, 978, 979, 979, 978, 978, 978, 978, 978, 978, 977, 977, 978, 978, 978, 978, 978, 978, 978, 979, 978, 979, 980, 980, 979, 979, 979, 979, 979, 978, 978, 978, 978, 978, 977, 977, 977, 977, 976, 976, 976, 976, 976, 975, 975, 974, 974, 975, 975, 975, 976, 976, 975, 975, 975, 975, 975, 974, 974, 974, 973, 973, 974, 975, 975, 976, 975, 975, 975, 976, 976, 976, 976, 976, 976, 976, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 974, 974, 974, 974, 974, 974, 975, 975, 975, 976, 976, 976, 976, 976, 976, 976, 975, 975, 975, 975, 975, 974, 974, 974, 973, 974, 974, 973, 973, 973, 973, 973, 971, 972, 973, 973, 975, 975, 975, 975, 975, 975, 976, 976, 976]


avalanche = []
av = 0
for i in range(len(data)-1):
    if data[i] > data[i+1]:
        av += data[i] - data[i+1]
    else:
        if av != 0:
            avalanche.append(av)
            av = 0

print(avalanche)

plt.loglog(avalanche, len(avalanche), marker='o', linestyle='none')# plt.scatter(peaks, x, color='r', label='Avalanche Peaks', marker='^')

plt.show()


# # Event detection algorithm using find_peaks
# threshold = 900  # Adjust the threshold based on your dataset
# peaks, _ = find_peaks(data, height=threshold, distance=1)
# print(peaks)

# def findElements(lst1, lst2):
#     return [lst1[i] for i in lst2]

# print(findElements(data, peaks))

# x = findElements(data, peaks)

# # Plot the data and highlight avalanches
# plt.figure(figsize=(10, 5))
# plt.plot(data, label='Data')
# plt.scatter(peaks, x, color='r', label='Avalanche Peaks', marker='^')
# plt.title('Avalanche Detection in Data')
# plt.xlabel('Time')
# plt.ylabel('Event Count')
# plt.legend()
# plt.show()
