import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import find_peaks


# Replace this with your actual dataset
data = [398, 398, 402, 402, 406, 408, 410, 414, 416, 418, 420, 423, 426, 432, 435, 437, 436, 439, 443, 444, 445, 447, 448, 450, 453, 456, 463, 466, 471, 474, 480, 484, 485, 486, 488, 492, 493, 496, 498, 503, 508, 514, 518, 522, 526, 530, 534, 542, 550, 554, 559, 563, 569, 576, 580, 586, 590, 594, 598, 601, 604, 613, 613, 617, 620, 623, 626, 629, 629, 633, 632, 632, 633, 638, 640, 644, 650, 651, 654, 659, 661, 666, 669, 672, 677, 679, 684, 689, 696, 698, 701, 705, 709, 713, 714, 721, 728, 729, 733, 732, 736, 739, 741, 744, 745, 748, 754, 757, 758, 763, 767, 769, 774, 776, 783, 784, 789, 793, 795, 800, 798, 799, 798, 803, 807, 811, 818, 825, 828, 837, 843, 843, 847, 846, 847, 848, 853, 852, 857, 863, 865, 868, 868, 871, 870, 871, 872, 874, 877, 879, 879, 883, 886, 889, 892, 895, 898, 898, 902, 904, 904, 905, 910, 911, 914, 916, 917, 919, 920, 920, 920, 920, 920, 920, 922, 924, 924, 923, 924, 925, 927, 927, 927, 928, 933, 932, 934, 935, 935, 933, 934, 935, 936, 936, 935, 937, 936, 937, 936, 937, 938, 938, 941, 942, 946, 946, 951, 953, 955, 958, 957, 957, 956, 958, 959, 960, 962, 964, 962, 962, 962, 962, 964, 964, 964, 964, 963, 963, 963, 963, 963, 961, 962, 964, 965, 964, 965, 965, 964, 965, 965, 965, 965, 965, 965, 965, 966, 966, 966, 966, 966, 966, 965, 965, 966, 967, 968, 969, 970, 970, 970, 970, 969, 969, 969, 969, 968, 968, 968, 968, 969, 970, 971, 972, 971, 971, 971, 972, 973, 974, 975, 974, 974, 974, 975, 978, 979, 980, 982, 984, 983, 984, 984, 985, 987, 987, 988, 989, 989, 989, 988, 988, 988, 988, 988, 988, 989, 989, 991, 992, 994, 994, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1006, 1006, 1008, 1008, 1009, 1010, 1010, 1012, 1010, 1010, 1011, 1012, 1011, 1013, 1013, 1015, 1014, 1014, 1013, 1013, 1015, 1015, 1013, 1013, 1012, 1013, 1013, 1014, 1016, 1017, 1018, 1018, 1015, 1017, 1017, 1019, 1019, 1020, 1020, 1020, 1020, 1019, 1019, 1019, 1019, 1019, 1018, 1018, 1019, 1020, 1020, 1020, 1021, 1021, 1021, 1020, 1020, 1020, 1019, 1018, 1019, 1019, 1019, 1019, 1017, 1016, 1016, 1015, 1015, 1014, 1014, 1013, 1012, 1012, 1010, 1010, 1012, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1010, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1007, 1007, 1006, 1006, 1006, 1006, 1007, 1008, 1008, 1010, 1008, 1007, 1007, 1007, 1007, 1006, 1005, 1004, 1004, 1004, 1004, 1004, 1005, 1005, 1006, 1006, 1007, 1007, 1007, 1007, 1007, 1007, 1006, 1006, 1006, 1006, 1006, 1006, 1005, 1005, 1005, 1005, 1005, 1006, 1006, 1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1007, 1008, 1007, 1007, 1007, 1008, 1009, 1010, 1012, 1010, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1008, 1007, 1007, 1007, 1006, 1006, 1004, 1004, 1004, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006, 1007, 1006, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1007, 1007, 1007, 1007, 1007, 1006, 1005, 1005, 1005, 1005, 1004, 1005, 1005, 1005, 1005, 1005, 1003, 1004, 1004, 1005, 1005, 1006, 1005, 1005, 1006, 1006, 1006, 1005, 1005, 1005, 1005, 1005, 1005, 1004, 1004, 1004, 1004, 1003, 1004, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1003, 1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1005, 1007, 1007, 1008, 1008, 1006, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1006, 1007, 1007, 1007]

avalanche = []
av = 0
for i in range(len(data)-1):
    if data[i] > data[i+1]:
        av += data[i] - data[i+1]
    else:
        if av != 0:
            avalanche.append(av)
            av = 0

print(avalanche)

plt.loglog(avalanche, len(avalanche), marker='o', linestyle='none')# plt.scatter(peaks, x, color='r', label='Avalanche Peaks', marker='^')

plt.show()


# # Event detection algorithm using find_peaks
# threshold = 900  # Adjust the threshold based on your dataset
# peaks, _ = find_peaks(data, height=threshold, distance=1)
# print(peaks)

# def findElements(lst1, lst2):
#     return [lst1[i] for i in lst2]

# print(findElements(data, peaks))

# x = findElements(data, peaks)

# # Plot the data and highlight avalanches
# plt.figure(figsize=(10, 5))
# plt.plot(data, label='Data')
# plt.scatter(peaks, x, color='r', label='Avalanche Peaks', marker='^')
# plt.title('Avalanche Detection in Data')
# plt.xlabel('Time')
# plt.ylabel('Event Count')
# plt.legend()
# plt.show()
